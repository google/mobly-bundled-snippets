buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

plugins {
    id "com.github.sherter.google-java-format" version "0.9"
    id 'com.android.application' version '7.4.1'
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs << "-Xlint:all"
        }
    }
}

apply plugin: 'com.android.application'

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.google.android.mobly.snippet.bundled"
        // Set by https://github.com/google/mobly-snippet-lib/blob/master/third_party/sl4a/build.gradle
        minSdkVersion 26
        // Set target to 22 to avoid having to deal with runtime permissions.
        //noinspection ExpiredTargetSdkVersion
        targetSdk 31
        versionCode 1
        versionName "0.0.1"
        setProperty("archivesBaseName", "mobly-bundled-snippets")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        abortOnError false
        checkAllWarnings true
        warningsAsErrors true
        disable 'HardwareIds','MissingApplicationIcon','GoogleAppIndexingWarning','InvalidPackage','OldTargetApi'
    }
}

// Produces a jar of source files. Needed for compliance reasons.
tasks.register('sourcesJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'src'
}

tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(
        android.getBootClasspath().join(File.pathSeparator))
}

artifacts {
    archives sourcesJar
}

dependencies {
    implementation 'androidx.test:runner:1.5.2'
    implementation "androidx.test.uiautomator:uiautomator:2.2.0"
    implementation 'com.google.android.mobly:mobly-snippet-lib:1.3.1'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.google.errorprone:error_prone_annotations:2.18.0'

    testImplementation 'com.google.errorprone:error_prone_annotations:2.18.0'
    testImplementation 'com.google.guava:guava:31.0.1-jre'
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'junit:junit:4.13.2'
}

googleJavaFormat {
    options style: 'AOSP'
}

// Open lint's HTML report in your default browser or viewer.
tasks.register('openLintReport', Exec) {
    def lint_report = "build/reports/lint-results.html"
    def cmd = "cat"
    def platform = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    if (platform.contains("linux")) {
        cmd = "xdg-open"
    } else if (platform.contains("mac os x")) {
        cmd = "open"
    } else if (platform.contains("windows")) {
        cmd = "launch"
    }
    commandLine cmd, lint_report
}

tasks.register('presubmit') {
    dependsOn { ['googleJavaFormat', 'lint', 'openLintReport'] }
    doLast {
        println "Fix any lint issues you see. When it looks good, submit the pull request."
    }
}

